#!/bin/sh
set -e

source ./util.sh

# callAPI <method> <endpoint> <data>
callAPI() { 
    method="$1"
    endpoint="$2"
    shift 2 || true
    IFS=$'\n'
    curl $CURL_OPTS -X "$method" -H "Authorization: Bearer $DRONE_TOKEN" $@ --url "$DRONE_SERVER/api/$endpoint"
}


[ -z "$DRONE_TOKEN" ]  && logerror "No DRONE_TOKEN specified"
[ -z "$DRONE_SERVER" ] && logerror "No DRONE_SERVER specified"

command="$(echo "$1" | tr A-Z a-z)"
shift || true

case $command in
    getuser)
        callAPI GET 'user';;
    getfeed)
        callAPI GET 'user/feed';;
    getrepos)
        callAPI GET "user/repos";;
    getbuilds)
        if [ -n "$2" ]; then
            callAPI GET "repos/$1/builds" | jq -e -cM "[ .[] | select(.branch == \"$2\") ]"
        else
            callAPI GET "repos/$1/builds"
        fi;;
    getlatestbuild)
        if [ -n "$2" ]; then
            callAPI GET "repos/$1/builds" | jq -e -cM "[ .[] | select(.branch == \"$2\") ] | .[0]"
        else
            callAPI GET "repos/$1/builds" | jq -e -cM ".[0]"
        fi;;
    getsuccessfulbuild)
        if [ -n "$2" ]; then
            callAPI GET "repos/$1/builds" | jq -e -cM "[ .[] | select(.branch == \"$2\") | select(.status == \"success\") ] | .[0]"
        else
            callAPI GET "repos/$1/builds" | jq -e -cM "[ .[] | select(.status == \"success\") ] | .[0]"
        fi;;
    forkbuild)
        callAPI POST "repos/$1/builds/$2" -G "$(printf -- "--data-urlencode\n%s\n" "$@")";;
    *)
        >&2 echo -e "USAGE:\n\t$(basename "$0") <command> [args..]\n" \
            "\nCOMMANDS:\n" \
            "\tgetuser                              Get information abouth the currently authenticated user\n" \
            "\tgetfeed                              Get the activity feed of the currently authenticated user\n" \
            "\tgetrepos                             Get a list of enabled repos\n" \
            "\tgetbuilds <repo> [branch]            Get a list of builds for a repo\n" \
            "\tgetlatestbuild <repo> [branch]       Get the latest build for a repo\n" \
            "\tgetsuccessfusbuild <repo> [branch]   Get the latest build that succeeded for a repo\n" \
            "\tforkbuild <repo> <id-to-fork> [args] Fork a build for a repo\n" \
            ""
        exit 99;;
esac
 
